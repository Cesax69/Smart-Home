services:
  # Base de datos PostgreSQL para Usuarios
  postgres-users:
    image: postgres:15-alpine
    container_name: smart-home-postgres-users
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: linux
    ports:
      - "5432:5432"
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
      - ./backend/setup-users-database.sql:/docker-entrypoint-initdb.d/setup-users-database.sql
    networks:
      - smart-home-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d users_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Base de datos PostgreSQL para Tareas
  postgres-tasks:
    image: postgres:15-alpine
    container_name: smart-home-postgres-tasks
    environment:
      POSTGRES_DB: tasks_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: linux
    ports:
      - "5433:5432"
    volumes:
      - postgres_tasks_data:/var/lib/postgresql/data
      - ./backend/setup-tasks-database.sql:/docker-entrypoint-initdb.d/setup-tasks-database.sql
    networks:
      - smart-home-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tasks_db"]
      interval: 30s
      timeout: 10s
      retries: 3


  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: smart-home-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - CORS_ORIGIN=http://localhost:4200,http://localhost:3000
      - USERS_SERVICE_URL=http://users-service:3001
      - TASKS_SERVICE_URL=http://tasks-service:3002
      - NOTIFICATIONS_SERVICE_URL=http://notifications-service:3004
      - FILE_UPLOAD_SERVICE_URL=http://file-upload-service:3005
    depends_on:
      - users-service
      - tasks-service
      - notifications-service
      - file-upload-service
    networks:
      - smart-home-network
    restart: unless-stopped

  # Users Service
  users-service:
    build:
      context: ./backend/users-service
      dockerfile: Dockerfile
    container_name: smart-home-users-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres-users
      - DB_PORT=5432
      - DB_NAME=users_db
      - DB_USER=postgres
      - DB_PASSWORD=linux
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    depends_on:
      postgres-users:
        condition: service_healthy
    networks:
      - smart-home-network
    restart: unless-stopped

  # Tasks Service
  tasks-service:
    build:
      context: ./backend/tasks-service
      dockerfile: Dockerfile
    container_name: smart-home-tasks-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=postgres-tasks
      - DB_PORT=5432
      - DB_NAME=tasks_db
      - DB_USER=postgres
      - DB_PASSWORD=linux
      - DB_SCHEMA=public
      - USERS_SERVICE_URL=http://users-service:3001
      - NOTIFICATION_SERVICE_URL=http://notifications-service:3004
      - API_GATEWAY_URL=http://api-gateway:3000
    depends_on:
      postgres-tasks:
        condition: service_healthy
    networks:
      - smart-home-network
    restart: unless-stopped

  # Notifications Service
  notifications-service:
    build:
      context: ./backend/notifications-service
      dockerfile: Dockerfile
    container_name: smart-home-notifications-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - WHATSAPP_API_URL=https://api.whatsapp.com/send
      - WEBHOOK_SECRET=your-webhook-secret-change-in-production
      - REDIS_HOST=smart-home-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=smartHomeRedis2024
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - smart-home-network
    restart: unless-stopped

  # File Upload Service
  file-upload-service:
    build:
      context: ./backend/file-upload-service
      dockerfile: Dockerfile
    container_name: smart-home-file-upload-service
    ports:
      - "3005:3005"
    env_file:
      - ./backend/file-upload-service/.env
    environment:
      - NODE_ENV=production
      - MAX_FILE_SIZE=10485760
      - ALLOWED_EXTENSIONS=jpg,jpeg,png,gif,pdf,doc,docx,txt
    volumes:
      - file_uploads:/app/uploads
      - file_temp:/app/temp
      - file_quarantine:/app/quarantine
    networks:
      - smart-home-network
    restart: unless-stopped

  # AI Query Service
  ai-query-service:
    build:
      context: ./backend/ai-query-service
      dockerfile: Dockerfile
    container_name: smart-home-ai-query-service
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: production
      PORT: 3006
      USERS_SERVICE_URL: http://users-service:3001/api
      AI_DB_CONNECTIONS: >-
        [{"id":"users-pg","type":"postgres","name":"Users DB (Postgres)","url":"postgresql://postgres:linux@postgres-users:5432/users_db","readOnly":true},{"id":"tasks-pg","type":"postgres","name":"Tasks DB (Postgres)","url":"postgresql://postgres:linux@postgres-tasks:5432/tasks_db","readOnly":true}]
    depends_on:
      postgres-users:
        condition: service_healthy
      postgres-tasks:
        condition: service_healthy
    networks:
      - smart-home-network
    restart: unless-stopped

  # Redis Service for Notifications and Caching
  redis:
    image: redis:7-alpine
    container_name: smart-home-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smart-home-network
    command: redis-server --requirepass smartHomeRedis2024 --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "smartHomeRedis2024", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  smart-home-network:
    driver: bridge

volumes:
  postgres_users_data:
    driver: local
  postgres_tasks_data:
    driver: local
  file_uploads:
    driver: local
  file_temp:
    driver: local
  file_quarantine:
    driver: local
  redis_data:
    driver: local